generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       String @id @default(uuid())
    email    String @unique
    password String

    accounts Account[]
    sessions Session[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("users")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Ingredient {
    id           String             @id @default(uuid())
    name         String
    category     Category
    unit         Unit
    pricePerUnit Float?
    description  String?
    recipes      RecipeIngredient[] // связывает ингредиент с промежуточной табл. рецептИнгредиент  
    createdAt    DateTime           @default(now()) @map("created_at")
    updatedAt    DateTime           @updatedAt @map("updated_at")

    @@map("ingredients")
}

model Recipe {
    id          String             @id @default(uuid())
    name        String
    description String
    imageUrl    String?            @map("image_url")
    // содержит ссылку на картинку. сделать возможность добавления файлов и работы с файловой системой
    // чтобы была возможность добавить картинку (загрузить), удалить картинку 
    ingredients RecipeIngredient[] // связывает рецепт с промежуточной табл. рецептИнгредиент  

    @@map("recipes")
}

model RecipeIngredient {
    id           String     @id @default(uuid())
    recipe       Recipe     @relation(fields: [recipeId], references: [id])
    recipeId     String
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
    ingredientId String
    quantity     Float

    @@map("recipe_ingredient")
}

enum Category {
    VEGETABLES
    FRUITS
    MEAT
    DAIRY
    SPICES
    OTHER
}

enum Unit {
    GRAMS
    KILOGRAMS
    LITERS
    MILLILITERS
    PIECES
}
